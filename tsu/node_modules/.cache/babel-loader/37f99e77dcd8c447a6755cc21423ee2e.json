{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _getLatitude = _interopRequireDefault(require(\"./getLatitude\"));\n\nvar _getLongitude = _interopRequireDefault(require(\"./getLongitude\"));\n\nvar _toRad = _interopRequireDefault(require(\"./toRad\"));\n\nvar _toDeg = _interopRequireDefault(require(\"./toDeg\"));\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar getBoundsOfDistance = function getBoundsOfDistance(point, distance) {\n  var latitude = (0, _getLatitude.default)(point);\n  var longitude = (0, _getLongitude.default)(point);\n  var radLat = (0, _toRad.default)(latitude);\n  var radLon = (0, _toRad.default)(longitude);\n  var radDist = distance / _constants.earthRadius;\n  var minLat = radLat - radDist;\n  var maxLat = radLat + radDist;\n  var MAX_LAT_RAD = (0, _toRad.default)(_constants.MAXLAT);\n  var MIN_LAT_RAD = (0, _toRad.default)(_constants.MINLAT);\n  var MAX_LON_RAD = (0, _toRad.default)(_constants.MAXLON);\n  var MIN_LON_RAD = (0, _toRad.default)(_constants.MINLON);\n  var minLon;\n  var maxLon;\n\n  if (minLat > MIN_LAT_RAD && maxLat < MAX_LAT_RAD) {\n    var deltaLon = Math.asin(Math.sin(radDist) / Math.cos(radLat));\n    minLon = radLon - deltaLon;\n\n    if (minLon < MIN_LON_RAD) {\n      minLon += Math.PI * 2;\n    }\n\n    maxLon = radLon + deltaLon;\n\n    if (maxLon > MAX_LON_RAD) {\n      maxLon -= Math.PI * 2;\n    }\n  } else {\n    minLat = Math.max(minLat, MIN_LAT_RAD);\n    maxLat = Math.min(maxLat, MAX_LAT_RAD);\n    minLon = MIN_LON_RAD;\n    maxLon = MAX_LON_RAD;\n  }\n\n  return [{\n    latitude: (0, _toDeg.default)(minLat),\n    longitude: (0, _toDeg.default)(minLon)\n  }, {\n    latitude: (0, _toDeg.default)(maxLat),\n    longitude: (0, _toDeg.default)(maxLon)\n  }];\n};\n\nvar _default = getBoundsOfDistance;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_getLatitude","_interopRequireDefault","require","_getLongitude","_toRad","_toDeg","_constants","obj","__esModule","getBoundsOfDistance","point","distance","latitude","longitude","radLat","radLon","radDist","earthRadius","minLat","maxLat","MAX_LAT_RAD","MAXLAT","MIN_LAT_RAD","MINLAT","MAX_LON_RAD","MAXLON","MIN_LON_RAD","MINLON","minLon","maxLon","deltaLon","Math","asin","sin","cos","PI","max","min","_default"],"sources":["/Users/lucasklenovich/Documents/GitHub/wcg2/tsu/node_modules/geolib/es/getBoundsOfDistance.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _getLatitude=_interopRequireDefault(require(\"./getLatitude\"));var _getLongitude=_interopRequireDefault(require(\"./getLongitude\"));var _toRad=_interopRequireDefault(require(\"./toRad\"));var _toDeg=_interopRequireDefault(require(\"./toDeg\"));var _constants=require(\"./constants\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var getBoundsOfDistance=function getBoundsOfDistance(point,distance){var latitude=(0,_getLatitude.default)(point);var longitude=(0,_getLongitude.default)(point);var radLat=(0,_toRad.default)(latitude);var radLon=(0,_toRad.default)(longitude);var radDist=distance/_constants.earthRadius;var minLat=radLat-radDist;var maxLat=radLat+radDist;var MAX_LAT_RAD=(0,_toRad.default)(_constants.MAXLAT);var MIN_LAT_RAD=(0,_toRad.default)(_constants.MINLAT);var MAX_LON_RAD=(0,_toRad.default)(_constants.MAXLON);var MIN_LON_RAD=(0,_toRad.default)(_constants.MINLON);var minLon;var maxLon;if(minLat>MIN_LAT_RAD&&maxLat<MAX_LAT_RAD){var deltaLon=Math.asin(Math.sin(radDist)/Math.cos(radLat));minLon=radLon-deltaLon;if(minLon<MIN_LON_RAD){minLon+=Math.PI*2}maxLon=radLon+deltaLon;if(maxLon>MAX_LON_RAD){maxLon-=Math.PI*2}}else{minLat=Math.max(minLat,MIN_LAT_RAD);maxLat=Math.min(maxLat,MAX_LAT_RAD);minLon=MIN_LON_RAD;maxLon=MAX_LON_RAD}return[{latitude:(0,_toDeg.default)(minLat),longitude:(0,_toDeg.default)(minLon)},{latitude:(0,_toDeg.default)(maxLat),longitude:(0,_toDeg.default)(maxLon)}]};var _default=getBoundsOfDistance;exports.default=_default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}