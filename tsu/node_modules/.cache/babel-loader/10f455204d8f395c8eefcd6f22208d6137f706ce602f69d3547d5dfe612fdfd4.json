{"ast":null,"code":"import { FINISHED_WIN } from \"./../constants\";\nconst directionDictionary = {\n  N: \"↑\",\n  NNE: \"↗︎\",\n  NE: \"↗︎\",\n  ENE: \"↗︎\",\n  E: \"→\",\n  ESE: \"↘︎\",\n  SE: \"↘︎\",\n  SSE: \"↘︎\",\n  S: \"↓\",\n  SSW: \"↙︎\",\n  SW: \"↙︎\",\n  WSW: \"↙︎\",\n  W: \"←\",\n  WNW: \"↖︎\",\n  NW: \"↖︎\",\n  NNW: \"↖︎\"\n};\nconst getDayOfYear = () => {\n  const date = new Date();\n  const timestamp1 = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n  const timestamp2 = Date.UTC(date.getFullYear(), 0, 0);\n  const differenceInMilliseconds = timestamp1 - timestamp2;\n  const differenceInDays = differenceInMilliseconds / 1000 / 60 / 60 / 24;\n  return differenceInDays;\n};\nconst createShareableResult = (selectedCountries, game, numGuesses) => {\n  var resultString = \"#Worldle Day#\" + getDayOfYear() + \" \" + (game === FINISHED_WIN ? numGuesses : \"X\") + \"/6\\n\";\n  for (var i = 0; i < numGuesses; i++) {\n    var {\n      direction,\n      distance\n    } = selectedCountries[i];\n    resultString += (i === numGuesses - 1 && game === FINISHED_WIN ? \"🎯\" : distance + \" KM = \" + Math.round(distance / 1.609) + \" MI, \" + directionDictionary[direction]) + \",\\n\";\n  }\n  resultString += \"https://worldle-guess.vercel.app\";\n  navigator.clipboard.writeText(resultString);\n  return resultString;\n};\nexport default createShareableResult;","map":{"version":3,"names":["FINISHED_WIN","directionDictionary","N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW","getDayOfYear","date","Date","timestamp1","UTC","getFullYear","getMonth","getDate","timestamp2","differenceInMilliseconds","differenceInDays","createShareableResult","selectedCountries","game","numGuesses","resultString","i","direction","distance","Math","round","navigator","clipboard","writeText"],"sources":["/Users/lucasklenovich/Documents/GitHub/wcg2/tsu/src/utils/createShareableResult.ts"],"sourcesContent":["import { FINISHED_WIN } from \"./../constants\";\nimport { CountryType } from \"../interfaces\";\n\nconst directionDictionary: { [key: string]: any } = {\n  N: \"↑\",\n  NNE: \"↗︎\",\n  NE: \"↗︎\",\n  ENE: \"↗︎\",\n  E: \"→\",\n  ESE: \"↘︎\",\n  SE: \"↘︎\",\n  SSE: \"↘︎\",\n  S: \"↓\",\n  SSW: \"↙︎\",\n  SW: \"↙︎\",\n  WSW: \"↙︎\",\n  W: \"←\",\n  WNW: \"↖︎\",\n  NW: \"↖︎\",\n  NNW: \"↖︎\",\n};\n\nconst getDayOfYear = () => {\n  const date = new Date();\n  const timestamp1 = Date.UTC(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate()\n  );\n  const timestamp2 = Date.UTC(date.getFullYear(), 0, 0);\n  const differenceInMilliseconds = timestamp1 - timestamp2;\n  const differenceInDays = differenceInMilliseconds / 1000 / 60 / 60 / 24;\n  return differenceInDays;\n};\n\nconst createShareableResult = (\n  selectedCountries: CountryType[],\n  game: string,\n  numGuesses: number\n) => {\n  var resultString =\n    \"#Worldle Day#\" +\n    getDayOfYear() +\n    \" \" +\n    (game === FINISHED_WIN ? numGuesses : \"X\") +\n    \"/6\\n\";\n  for (var i = 0; i < numGuesses; i++) {\n    var { direction, distance } = selectedCountries[i];\n    resultString +=\n      (i === numGuesses - 1 && game === FINISHED_WIN\n        ? \"🎯\"\n        : distance +\n          \" KM = \" +\n          Math.round((distance as number) / 1.609) +\n          \" MI, \" +\n          directionDictionary[direction as string]) + \",\\n\";\n  }\n  resultString += \"https://worldle-guess.vercel.app\";\n  navigator.clipboard.writeText(resultString);\n  return resultString;\n};\nexport default createShareableResult;\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAG7C,MAAMC,mBAA2C,GAAG;EAClDC,CAAC,EAAE,GAAG;EACNC,GAAG,EAAE,IAAI;EACTC,EAAE,EAAE,IAAI;EACRC,GAAG,EAAE,IAAI;EACTC,CAAC,EAAE,GAAG;EACNC,GAAG,EAAE,IAAI;EACTC,EAAE,EAAE,IAAI;EACRC,GAAG,EAAE,IAAI;EACTC,CAAC,EAAE,GAAG;EACNC,GAAG,EAAE,IAAI;EACTC,EAAE,EAAE,IAAI;EACRC,GAAG,EAAE,IAAI;EACTC,CAAC,EAAE,GAAG;EACNC,GAAG,EAAE,IAAI;EACTC,EAAE,EAAE,IAAI;EACRC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EACvB,MAAMC,UAAU,GAAGD,IAAI,CAACE,GAAG,CACzBH,IAAI,CAACI,WAAW,CAAC,CAAC,EAClBJ,IAAI,CAACK,QAAQ,CAAC,CAAC,EACfL,IAAI,CAACM,OAAO,CAAC,CACf,CAAC;EACD,MAAMC,UAAU,GAAGN,IAAI,CAACE,GAAG,CAACH,IAAI,CAACI,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACrD,MAAMI,wBAAwB,GAAGN,UAAU,GAAGK,UAAU;EACxD,MAAME,gBAAgB,GAAGD,wBAAwB,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;EACvE,OAAOC,gBAAgB;AACzB,CAAC;AAED,MAAMC,qBAAqB,GAAGA,CAC5BC,iBAAgC,EAChCC,IAAY,EACZC,UAAkB,KACf;EACH,IAAIC,YAAY,GACd,eAAe,GACff,YAAY,CAAC,CAAC,GACd,GAAG,IACFa,IAAI,KAAK/B,YAAY,GAAGgC,UAAU,GAAG,GAAG,CAAC,GAC1C,MAAM;EACR,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,EAAEE,CAAC,EAAE,EAAE;IACnC,IAAI;MAAEC,SAAS;MAAEC;IAAS,CAAC,GAAGN,iBAAiB,CAACI,CAAC,CAAC;IAClDD,YAAY,IACV,CAACC,CAAC,KAAKF,UAAU,GAAG,CAAC,IAAID,IAAI,KAAK/B,YAAY,GAC1C,IAAI,GACJoC,QAAQ,GACR,QAAQ,GACRC,IAAI,CAACC,KAAK,CAAEF,QAAQ,GAAc,KAAK,CAAC,GACxC,OAAO,GACPnC,mBAAmB,CAACkC,SAAS,CAAW,IAAI,KAAK;EACzD;EACAF,YAAY,IAAI,kCAAkC;EAClDM,SAAS,CAACC,SAAS,CAACC,SAAS,CAACR,YAAY,CAAC;EAC3C,OAAOA,YAAY;AACrB,CAAC;AACD,eAAeJ,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}