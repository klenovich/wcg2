{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useContext } from \"react\";\nimport getTodaySeed from \"./getTodaySeed\";\nimport { AppContext } from \"../App\";\nimport { countries } from \"../data/countries\";\nimport { IN_PROCESS } from \"../constants\";\nconst useToday = () => {\n  _s();\n  const [countrySvg, setCountrySvg] = useState();\n  const {\n    setTodayCountry,\n    numGuesses,\n    game\n  } = useContext(AppContext);\n  const random = getTodaySeed();\n  const index = Math.floor(random * countries.length);\n  const todayCountry = countries[index];\n  useEffect(() => {\n    const dynamicImport = async () => {\n      const shape = await import(`../data/countries-shape-svg/${todayCountry.value.toLowerCase()}/vector.svg`);\n      const flag = await import(`../data/countries-flag-svg/${todayCountry.value.toLowerCase()}.svg`);\n      const countrySvg = {\n        shape: shape.default,\n        flag: flag.default\n      };\n      setCountrySvg(countrySvg);\n      setTodayCountry(todayCountry);\n    };\n    if (numGuesses === 0 && game === IN_PROCESS) {\n      dynamicImport();\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [numGuesses, game]);\n  return countrySvg;\n};\n_s(useToday, \"cFG4NvF+apTI4iui8KvKTCJSULw=\");\nexport default useToday;","map":{"version":3,"names":["useState","useEffect","useContext","getTodaySeed","AppContext","countries","IN_PROCESS","useToday","_s","countrySvg","setCountrySvg","setTodayCountry","numGuesses","game","random","index","Math","floor","length","todayCountry","dynamicImport","shape","value","toLowerCase","flag","default"],"sources":["/Users/lucasklenovich/Documents/GitHub/wcg2/tsu/src/utils/useToday.ts"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport getTodaySeed from \"./getTodaySeed\";\nimport { AppContext } from \"../App\";\nimport { countries } from \"../data/countries\";\nimport { IN_PROCESS } from \"../constants\";\n\nconst useToday = () => {\n  const [countrySvg, setCountrySvg] = useState<any>();\n  const { setTodayCountry, numGuesses, game } = useContext(AppContext);\n  const random = getTodaySeed();\n  const index = Math.floor(random * countries.length);\n  const todayCountry = countries[index];\n  useEffect(() => {\n    const dynamicImport = async () => {\n      const shape = await import(\n        `../data/countries-shape-svg/${todayCountry.value.toLowerCase()}/vector.svg`\n      );\n      const flag = await import(\n        `../data/countries-flag-svg/${todayCountry.value.toLowerCase()}.svg`\n      );\n      const countrySvg = { shape: shape.default, flag: flag.default };\n      setCountrySvg(countrySvg);\n      setTodayCountry(todayCountry);\n    };\n\n    if (numGuesses === 0 && game === IN_PROCESS) {\n      dynamicImport();\n    }\n\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [numGuesses, game]);\n\n  return countrySvg;\n};\n\nexport default useToday;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACvD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,UAAU,QAAQ,QAAQ;AACnC,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,UAAU,QAAQ,cAAc;AAEzC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAM,CAAC;EACnD,MAAM;IAAEW,eAAe;IAAEC,UAAU;IAAEC;EAAK,CAAC,GAAGX,UAAU,CAACE,UAAU,CAAC;EACpE,MAAMU,MAAM,GAAGX,YAAY,CAAC,CAAC;EAC7B,MAAMY,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAGT,SAAS,CAACa,MAAM,CAAC;EACnD,MAAMC,YAAY,GAAGd,SAAS,CAACU,KAAK,CAAC;EACrCd,SAAS,CAAC,MAAM;IACd,MAAMmB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,KAAK,GAAG,MAAM,MAAM,CACvB,+BAA8BF,YAAY,CAACG,KAAK,CAACC,WAAW,CAAC,CAAE,aAClE,CAAC;MACD,MAAMC,IAAI,GAAG,MAAM,MAAM,CACtB,8BAA6BL,YAAY,CAACG,KAAK,CAACC,WAAW,CAAC,CAAE,MACjE,CAAC;MACD,MAAMd,UAAU,GAAG;QAAEY,KAAK,EAAEA,KAAK,CAACI,OAAO;QAAED,IAAI,EAAEA,IAAI,CAACC;MAAQ,CAAC;MAC/Df,aAAa,CAACD,UAAU,CAAC;MACzBE,eAAe,CAACQ,YAAY,CAAC;IAC/B,CAAC;IAED,IAAIP,UAAU,KAAK,CAAC,IAAIC,IAAI,KAAKP,UAAU,EAAE;MAC3Cc,aAAa,CAAC,CAAC;IACjB;IAEA,OAAO,MAAM,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACR,UAAU,EAAEC,IAAI,CAAC,CAAC;EAEtB,OAAOJ,UAAU;AACnB,CAAC;AAACD,EAAA,CA5BID,QAAQ;AA8Bd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}